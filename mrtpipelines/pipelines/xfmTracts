#!/usr/bin/env python
""" xfmTracts

Python command line interface for transforming and combining clustered data.

"""
def proc_cmd(cmd):
    procCmd = cmd.split(" ")

    return procCmd

def get_parser():
    """
    Argument Parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter
    from mrtpipelines._version import __version__

    parser = ArgumentParser(description=('Tracks scalar information to vtk '
                                         'polydata and returns text file'),
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument('--version', action='version', version=__version__)

    # Required arguments
    g_req = parser.add_argument_group('required arguments')
    g_req.add_argument('in_file', help='Clustered tractography to be '
                                       'transformed. Provide full path.')
    g_req.add_argument('warp', help='Warp file to transform tractography')
    g_req.add_argument('out_dir', help="Output directory. Defaults to "
                                       "<bids_dir>/derivatives/neurobeer ")

    # Optional arguments
    g_opt = parser.add_argument_group('control arguments')
    g_opt.add_argument('-v', '--verbose', action='count', default=0,
                       help='verbosity of tool')

    return parser

def main():
    """
    Entry point of code
    """
    import os
    import os.path as op
    import subprocess

    args = get_parser().parse_args()
    # Required inputs
    in_file = args.in_file
    warp = args.warp
    out_dir = args.out_dir

    if not op.exists(out_dir):
        os.makedirs(out_dir)

    if args.verbose != 0:
        print("\nConverting streamlines from .vtk to .tck...")

    # Convert to from .vtk to .tck
    ftck = in_file.split('.', -1)[-2]
    ftck = ftck.split('/', -1)[-1]
    ftck = op.join(op.abspath(out_dir), ftck) + '.tck'

    cmd = proc_cmd("tckconvert -nthreads 1 %s %s" % (in_file, ftck))
    conv1_proc = subprocess.Popen(cmd,
                                  stdout=open(os.devnull, 'wb')).communicate()

    if conv1_proc[0] is not None or not op.exists(ftck):
        print("\nError converting .vtk to .tck")
        exit()

    # Warp clustered data to subject space
    if args.verbose != 0:
        print("\nWarping to subject space...")

    ftck_xfm = ftck.replace('Clustered.tck', 'xfm_Clustered.tck')

    cmd = proc_cmd("tcktransform -nthreads 1 %s %s %s" % (ftck, warp, ftck_xfm))
    xfm_proc = subprocess.Popen(cmd,
                                stdout=open(os.devnull, 'wb')).communicate()

    if xfm_proc[0] is not None or not op.exists(ftck_xfm):
        print("\nError warping clustered tractography")
        exit()

    if args.verbose != 0:
        print("\nConverting back to vtk file...")

    # Convert to vtk
    fvtk = ftck_xfm.split('.', -1)[-2]
    fvtk = fvtk + '.vtk'

    cmd = proc_cmd("tckconvert -nthreads 1 %s %s" % (ftck_xfm, fvtk))
    conv2_proc = subprocess.Popen(cmd,
                                  stdout=open(os.devnull, 'wb')).communicate()

    if conv2_proc[0] is not None or not op.exists(ftck):
        print("\nError converting .tck to .vtk")
        exit()

    if args.verbose != 0:
        print("\nFinished warping tractography")
        print("\nNOTE: Streamline information is not copied to warped data.")
        print("\nPlease use NeuroBEER function xfmData to copy streamline info")


if __name__ == '__main__':
    main()
