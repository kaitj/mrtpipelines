#!/usr/bin/env python3
""" genACTTractography

Python command line interface for MRTrix3 ACT Tractography pipeline

"""
def get_parser():
    """
    Argument parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter

    parser = ArgumentParser(description="Pipeline to generate MRTrix3 ACT "
                                        "Tractography",
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument("-v", "--version", dest="version", action="version",
                        version="0.0.1")

    # Required arguments
    g_req = parser.add_argument_group("Required arguments")
    g_req.add_argument("bids_dir", help="Directory with input dataset, "
                                        "formatted according to the BIDS "
                                        "standard. This can either be "
                                        "derivative level directory or "
                                        "parent BIDS directory.")
    g_req.add_argument('participant_label', help="A file containing label(s) "
                                                 "of participant(s) to perform "
                                                 "pipeline execution on")

    # Optional arguments
    g_opt = parser.add_argument_group("Optional arguments")
    g_opt.add_argument("-w", "--work_dir", dest="work_dir",
                                           help="Work directory. Defaults to "
                                            "<bids_dir>/derivatives/scratch")
    g_opt.add_argument("-n", "--nthreads", dest="nthreads", default=1,
                                           help="The number of threads to use "
                                           "for pipeline execution where "
                                           "applicable.")

    return parser

def main():
    """
    Entry point of coide
    """
    import os.path as op

    from bids.grabbids import BIDSLayout

    from nipype import config
    from nipype.pipeline import engine as pe
    from nipype.interfaces import utility as niu

    from mrtpipelines.interfaces import io
    from mrtpipelines.workflows.tractography import population_wf, preproc_wf

    args = get_parser().parse_args()

    # Required inputs
    bids_dir = args.bids_dir
    subjids = args.participant_label
    nthreads = int(args.nthreads)

    # Set work & crash directories
    if args.work_dir:
        work_dir = op.abspath(args.work_dir)
        crash_dir = op.join(op.abspath(args.work_dir), "crash")
    else:
        work_dir = op.join(bids_dir, "derivatives/scratch")
        crash_dir = op.join(op.abspath(bids_dir, "derivatives/crash"))

    config.update_config({'logging': {'log_directory': work_dir,
                                      'log_to_file': True,
                                      },
                          'execution': {'crashdump_dir': crash_dir,
                                        'crashfile_format': 'txt'
                                        }})

    # getSubj
    Subjid = io.getSubj(subjids, work_dir)

    # Create necessary nodes not part of existing workflows
    # BIDSDataGrabber
    layout = BIDSLayout(bids_dir)

    BIDSDataGrabber = pe.Node(niu.Function(function=io.getData,
                                           input_names=['bids_layout', 'subjid'],
                                           output_names=['nifti', 'bdata', 'parc']),
                                           name='BIDSDataGrabber')
    BIDSDataGrabber.base_dir = work_dir
    BIDSDataGrabber.inputs.bids_layout = layout

    # MRTrix Preproc workflow
    act_preproc_wf = preproc_wf.act_preproc_wf(wdir=work_dir, nthreads=nthreads)

    # MRTrix population template workflowmrt.
    template_wf = population_wf.pop_template_wf(wdir=work_dir, nthreads=nthreads)

    # Pipeline creation (join nodes and workflows)
    pl = pe.Workflow(name='genACTTractography')
    pl.base_dir = work_dir

    pl.connect([(Subjid, BIDSDataGrabber, [('subjid', 'subjid')]),
                        (BIDSDataGrabber, act_preproc_wf, [('nifti', 'MRConvert.in_file'),
                                                           ('bdata', 'MRConvert.grad_fsl')]),
                        (BIDSDataGrabber, act_preproc_wf, [('parc', 'Generate5tt.in_file')]),
                        (BIDSDataGrabber, act_preproc_wf, [('bdata', 'dwi2response.grad_fsl')]),
                        (BIDSDataGrabber, act_preproc_wf, [('bdata', 'dwi2mask.grad_fsl')]),
                        (act_preproc_wf, template_wf, [('dwi2response.gm_file', 'avgResponse_gm.in_files',),
                                                       ('dwi2response.wm_file', 'avgResponse_wm.in_files'),
                                                       ('dwi2response.csf_file', 'avgResponse_csf.in_files'),
                                                       ('MRConvert.out_file', 'dwi2fod.in_file')]),
                        (act_preproc_wf, template_wf, [('dwi2mask.out_file', 'copyMask.in_file')])
                ])

    pl.write_graph(graph2use='flat', format='svg', simple_form=False)
    # pl.write_graph(graph2use='exec', format='svg', simple_form=False)
    pl.write_graph(graph2use='colored', format='svg')

    if nthreads >= 2:
        pl.run(plugin='MultiProc', plugin_args={'n_procs': nthreads})
    else:
        pl.run(plugin='Linear')


if __name__ == '__main__':
    main()
