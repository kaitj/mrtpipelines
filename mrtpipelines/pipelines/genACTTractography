#!/usr/bin/env python3
""" genACTTractography

Python command line interface for MRTrix3 ACT Tractography pipeline

"""
def get_parser():
    """
    Argument parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter

    parser = ArgumentParser(description="Pipeline to generate MRTrix3 ACT "
                                        "Tractography",
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument("-v", "--version", dest="version", action="version",
                        version="0.0.1")

    # Required arguments
    g_req = parser.add_argument_group("Required arguments")
    g_req.add_argument("bids_dir", help="Directory with input dataset, "
                                        "formatted according to the BIDS "
                                        "standard.")
    g_req.add_argument('participant_label', help="A file containing label(s) "
                                                 "of participant(s) to perform "
                                                 "pipeline execution on")

    # Optional arguments
    g_opt = parser.add_argument_group("Optional arguments")
    g_opt.add_argument("-s", "--select", dest="select", default=100000,
                                         help="Number of streamlines to "
                                              "generate for each subject. "
                                              "Defaults 100,000 streamlines")
    g_opt.add_argument("-w", "--work_dir", dest="work_dir",
                                           help="Work directory. Defaults to "
                                            "<bids_dir>/derivatives/scratch")
    g_opt.add_argument("-o", "--out_dir", dest="out_dir",
                                          help="Output directory. Defaults to "
                                           "<bids_dir>/derivatives/MRtrix")
    g_opt.add_argument("-n", "--nthreads", dest="nthreads", default=1,
                                           help="The number of threads to use "
                                           "for pipeline execution where "
                                           "applicable.")

    return parser


def getBIDS(layout, wdir=None):
    from nipype.pipeline import engine as pe
    from nipype.interfaces import utility as niu

    from mrtpipelines.interfaces import io

    BIDSDataGrabber = pe.Node(niu.Function(function=io.getData,
                                           input_names=['bids_layout',
                                                        'subjid'],
                                           output_names=['nifti', 'bdata',
                                                         'parc']),
                                           name='BIDSDataGrabber')
    BIDSDataGrabber.base_dir = wdir
    BIDSDataGrabber.inputs.bids_layout = layout

    return BIDSDataGrabber


def main():
    """
    Entry point of coide
    """
    import os.path as op

    from bids.grabbids import BIDSLayout

    from nipype import config, logging
    from nipype.pipeline import engine as pe

    from mrtpipelines.interfaces import io
    from mrtpipelines.workflows.tractography import (population_wf, preproc_wf,
                                                     tractography_wf)

    args = get_parser().parse_args()

    # Required inputs
    bids_dir = args.bids_dir
    subjids = args.participant_label
    nfibers = int(args.select)
    nthreads = int(args.nthreads)

    # Set work & crash directories
    if args.work_dir:
        work_dir = op.abspath(args.work_dir)
        crash_dir = op.join(op.abspath(args.work_dir), "crash")
    else:
        work_dir = op.join(bids_dir, "derivatives/scratch")
        crash_dir = op.join(op.abspath(bids_dir, "derivatives/crash"))

    config.update_config({'logging': {'log_directory': work_dir,
                                      'log_to_file': True,
                                      },
                          'execution': {'crashdump_dir': crash_dir,
                                        'crashfile_format': 'txt'
                                        }})
    logging.update_logging(config)

    # getSubj
    Subjid, noSubj = io.getSubj(subjids, work_dir)

    # Create necessary nodes not part of existing workflows
    # BIDSDataGrabber
    layout = BIDSLayout(op.join(op.abspath(bids_dir), "derivatives"))
    BIDSDataGrabber = getBIDS(layout=layout, wdir=work_dir)

    # MRTrix preprocessing workflow
    act_preproc_wf = preproc_wf.act_preproc_wf(wdir=work_dir,
                                               nthreads=nthreads)

    # MRTrix population template workflow
    template_wf = population_wf.pop_template_wf(wdir=work_dir,
                                                nthreads=nthreads)

    # MRTrix tractography preperation workflow
    prepACTTract_wf = preproc_wf.prepACTTract_wf(wdir=work_dir,
                                                 nthreads=nthreads)

    # MRTrix template tractography generation workflow
    genTemplate_wf = tractography_wf.genTemplate_wf(wdir=work_dir,
                                                    nthreads=nthreads)

    # MRTrix subject tractography generation workflow
    genSubj_wf = tractography_wf.genSubj_wf(nfibers=nfibers, wdir=work_dir,
                                            nthreads=nthreads)

    # Pipeline creation (join nodes and workflows)
    pl = pe.Workflow(name='genACTTractography')
    pl.base_dir = work_dir

    pl.connect([(Subjid, BIDSDataGrabber, [('subjid', 'subjid')]),
                (BIDSDataGrabber, act_preproc_wf, [
                    ('nifti', 'MRConvert.in_file'),
                    ('bdata', 'MRConvert.grad_fsl'),
                    ('parc', 'Generate5tt.in_file'),
                    ('bdata', 'dwi2response.grad_fsl'),
                    ('bdata', 'dwi2mask.grad_fsl')]),
                (act_preproc_wf, template_wf, [
                    ('dwi2response.gm_file', 'avgResponse_gm.in_files',),
                    ('dwi2response.wm_file', 'avgResponse_wm.in_files'),
                    ('dwi2response.csf_file', 'avgResponse_csf.in_files'),
                    ('MRConvert.out_file', 'dwi2fod.in_file'),
                    ('dwi2mask.out_file', 'copyMask.in_file')]),
                (template_wf, prepACTTract_wf, [
                    ('dwi2fod.wm_odf', 'MRRegister.in_file'),
                    ('population_template.out_file', 'MRRegister.ref_file'),
                    ('dwi2fod.wm_odf', 'FODTransform.in_file')]),
                (act_preproc_wf, prepACTTract_wf, [
                    ('dwi2mask.out_file', 'MRRegister.mask1'),
                    ('Generate5tt.out_file', 'AnatTransform.in_file')]),
                (prepACTTract_wf, genTemplate_wf, [
                    ('tcksift.out_file', 'tempConvert1.in_file')]),
                (prepACTTract_wf, genSubj_wf, [
                    ('tcksift.out_file', 'subjSelect.in_file')])
                ])

    pl.write_graph(graph2use='flat', format='svg', simple_form=False)
    pl.write_graph(graph2use='colored', format='svg')

    if nthreads >= 2:
        pl.run(plugin='MultiProc', plugin_args={'n_procs': nthreads})
    else:
        pl.run(plugin='Linear')


if __name__ == '__main__':
    main()
