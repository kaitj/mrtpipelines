#!/usr/bin/env python
""" genDhollanderTractography

Python command line interface for MRTrix3 multi-shell multi-tissue
constrained spherical deconvolution tractography pipeline with Dhollander
response function

"""
def get_parser():
    """
    Argument parser
    """
    from argparse import ArgumentParser, RawTextHelpFormatter

    parser = ArgumentParser(description="Pipeline to generate MRTrix3 "
                                        "multi-shell multi-tissue CSD "
                                        "tractography with Dhollander "
                                        "response",
                            formatter_class=RawTextHelpFormatter)

    # Version option
    parser.add_argument("-v", "--version", dest="version",
                        action="version", version="0.0.1")

    # Required arguments
    g_req = parser.add_argument_group("Required arguments")
    g_req.add_argument("bids_dir", help="Directory with input dataset, "
                                        "formatted according to the BIDS "
                                        "standard")
    g_req.add_argument("template_fod", help="A path to the template FOD "
                                            "file for registration of subjects")
    g_req.add_argument('participant_label', help="A file containing label(s) "
                                                 "of participant(s) to perform "
                                                 "pipeline execution on")

    # Optional arguments
    g_opt = parser.add_argument_group("Optional arguments")
    g_opt.add_argument("-s", "--select", dest="select", default=25000,
                                         help="Number of streamlines to "
                                              "generate for each subject. "
                                              "Defaults 100,000 streamlines")
    g_opt.add_argument("-l", "--lmax", dest="lmax", default=[0, 8, 8],
                                       nargs='*',
                                       help="maximum harmonic degree(s) for "
                                            "response function estimation "
                                            "(eg. --lmax 0 8 8)")
    g_opt.add_argument("-w", "--work_dir", dest="work_dir",
                                           help="Work directory. Defaults to "
                                            "<bids_dir>/derivatives/scratch")
    g_opt.add_argument("-o", "--out_dir", dest="out_dir",
                                          help="Output directory. Defaults to "
                                           "<bids_dir>/derivatives/MRtrix")
    g_opt.add_argument("-n", "--nthreads", dest="nthreads", default=1,
                                           help="The number of threads to use "
                                           "for pipeline execution where "
                                           "applicable.")

    return parser


def main():
    """
    Entry point of code
    """
    import os
    import os.path as op

    from bids.grabbids import BIDSLayout

    from nipype import config, logging
    from nipype.pipeline import engine as pe

    from mrtpipelines.interfaces import io
    from mrtpipelines.workflows import (preproc_wf, tractography_wf)

    args = get_parser().parse_args()

    # Required inputs
    bids_dir = args.bids_dir
    deriv_dir = op.join(op.abspath(bids_dir), "derivatives")
    subjids = args.participant_label
    lmax = args.lmax
    template_fod = op.abspath(args.template_fod)
    nfibers = int(args.select)
    nthreads = int(args.nthreads)

    # Set work & crash directories
    if args.work_dir:
        work_dir = op.abspath(args.work_dir)
        crash_dir = op.join(op.abspath(args.work_dir), "crash")
    else:
        work_dir = op.join(bids_dir, "derivatives/scratch")
        crash_dir = op.join(op.abspath(bids_dir, "derivatives/crash"))

    if not op.exists(work_dir):
        os.makedirs(work_dir)
    if not op.exists(crash_dir):
        os.makedirs(crash_dir)

    if args.out_dir:
        out_dir = op.abspath(args.out_dir)
    else:
        out_dir = op.join(deriv_dir, 'mrtrix')

    config.update_config({'logging': {'log_directory': work_dir,
                                      'log_to_file': True,
                                      },
                          'execution': {'crashdump_dir': crash_dir,
                                        'crashfile_format': 'txt'
                                        }})
    logging.update_logging(config)

    # getSubj
    Subjid, noSubj = io.getSubj(subjids, work_dir)

    # Create necessary nodes not part of existing workflows
    # BIDSDataGrabber
    layout = BIDSLayout(deriv_dir)
    BIDSDataGrabber = io.getBIDS(layout=layout, wdir=work_dir)

    # MRTrix preprocessing workflow
    dholl_preproc_wf = preproc_wf.dholl_preproc_wf(lmax=lmax,
                                                   template=template_fod,
                                                   wdir=work_dir,
                                                   nthreads=nthreads)

    dholl_tract_wf = tractography_wf.genDhollTract_wf(nfibers=nfibers,
                                                      wdir=work_dir,
                                                      nthreads=nthreads)

    # Rename nodes for sinking
    renameWarp1 = io.renameFile(file_name='space-Template_warp',
                                node_name='renameWarp1', wdir=work_dir,
                                nthreads=nthreads)
    renameWarp2 = io.renameFile(file_name='space-dwi_warp',
                                node_name='renameWarp2', wdir=work_dir,
                                nthreads=nthreads)
    renameFOD = io.renameFile(file_name='space-Template_wmfod_norm',
                              node_name='renameFOD', wdir=work_dir,
                              nthreads=nthreads)
    renameMask = io.renameFile(file_name='space-Template_brainmask',
                               node_name='renameMask', wdir=work_dir,
                               nthreads=nthreads)
    renameDWINorm = io.renameFile(file_name='space-Template_normalize',
                                  node_name='renameDWINorm', wdir=work_dir,
                                  nthreads=nthreads)
    renameDTI = io.renameFile(file_name='space-Template_tensor',
                              node_name='renameDTI', wdir=work_dir,
                              nthreads=nthreads)
    renameFA = io.renameFile(file_name='space-Template_fa',
                             node_name='renameFA', wdir=work_dir,
                             nthreads=nthreads)
    renameMD = io.renameFile(file_name='space-Template_md',
                             node_name='renameMD', wdir=work_dir,
                             nthreads=nthreads)
    renameAD = io.renameFile(file_name='space-Template_ad',
                             node_name='renameAD', wdir=work_dir,
                             nthreads=nthreads)
    renameRD = io.renameFile(file_name='space-Template_rd',
                             node_name='renameRD', wdir=work_dir,
                             nthreads=nthreads)
    renameTract = io.renameFile(file_name=('space-Template_variant-tcksift_streamlines-%d_tract.vtk' % nfibers),
                                node_name='renameTract', wdir=work_dir,
                                nthreads=nthreads)
    renameTck = io.renameFile(file_name=('space-Template_variant-tcksift_streamlines-%d_tract.vtk' % nfibers),
                              node_name='renameTck', wdir=work_dir,
                              nthreads=nthreads)

    # Subject datasink
    subjSink = io.subjSink(out_dir, wdir=work_dir, nthreads=nthreads)
    regex_sub = [('_subjid_sub-[0-9]*', ''),
                 ('_renameWarp[0-9]*', ''),
                 ('_renameFOD[0-9]*', ''),
                 ('_renameAD[0-9]*', ''),
                 ('_renameDTI[0-9]*', ''),
                 ('_renameFA[0-9]*', ''),
                 ('_renameMD[0-9]*', ''),
                 ('_renameRD[0-9]*', ''),
                 ('_renameDWINorm[0-9]*', ''),
                 ('_renameMask[0-9]*', ''),
                 ('_renameTract[0-9]*', ''),
                 ('_renameTck[0-9]*', '')]
    subjSink.inputs.regexp_substitutions = regex_sub

    # Pipeline creation (join nodes and workflows)
    pl = pe.Workflow(name='genDhollanderTractography')
    pl.base_dir = work_dir

    pl.connect([
                # Input
                (Subjid, BIDSDataGrabber, [
                    ('subjid', 'subjid')]),
                (BIDSDataGrabber, dholl_preproc_wf, [
                    ('nifti', 'dwiConvert.in_file'),
                    ('bdata', 'dwiConvert.grad_fsl'),
                    ('bdata', 'dwi2response.grad_fsl'),
                    ('mask', 'maskConvert.in_file')]),

                # Workflows
                (dholl_preproc_wf, dholl_tract_wf, [
                    ('FODTransform.out_file', 'genTract.in_file'),
                    ('maskConvert.out_file', 'genTract.seed_image'),
                    ('FODTransform.out_file', 'siftTract.in_fod')]),

                # File rename
                (Subjid, renameWarp1, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameWarp1, [
                    ('WarpSelect1.out', 'in_file')]),
                (Subjid, renameWarp2, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameWarp2, [
                    ('WarpSelect2.out', 'in_file')]),
                (Subjid, renameFOD, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameFOD, [
                    ('FODTransform.out_file', 'in_file')]),
                (Subjid, renameMask, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameMask, [
                    ('MaskTransform.out_file', 'in_file')]),
                (Subjid, renameDWINorm, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameDWINorm, [
                    ('DWITransform.out_file', 'in_file')]),
                (Subjid, renameDTI, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameDTI, [
                    ('FitTensor.out_file', 'in_file')]),
                (Subjid, renameFA, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameFA, [
                    ('TensorMetrics.out_fa', 'in_file')]),
                (Subjid, renameMD, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameMD, [
                    ('TensorMetrics.out_adc', 'in_file')]),
                (Subjid, renameAD, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameAD, [
                    ('TensorMetrics.out_ad', 'in_file')]),
                (Subjid, renameRD, [
                    ('subjid', 'subjid')]),
                (dholl_preproc_wf, renameRD, [
                    ('TensorMetrics.out_rd', 'in_file')]),
                (Subjid, renameTract, [
                    ('subjid', 'subjid')]),
                (dholl_tract_wf, renameTract, [
                    ('convTract.out_file', 'in_file')]),
                (Subjid, renameTck, [
                    ('subjid', 'subjid')]),
                (dholl_tract_wf, renameTck, [
                    ('siftTract.out_file', 'in_file')]),

                # Output
                (Subjid, subjSink, [
                    ('subjid', 'container')]),
                (renameWarp1, subjSink, [
                    ('out_file', 'transform.@warp1')]),
                (renameWarp2, subjSink, [
                    ('out_file', 'transform.@warp2')]),
                (renameFOD, subjSink, [
                    ('out_file', 'response.@wmfod')]),
                (renameMask, subjSink, [
                    ('out_file', 'dwi.@mask')]),
                (renameDWINorm, subjSink, [
                    ('out_file', 'dwi.@data')]),
                (renameDTI, subjSink, [
                    ('out_file', 'dti.@tensor')]),
                (renameFA, subjSink, [
                    ('out_file', 'dti.@fa')]),
                (renameMD, subjSink, [
                    ('out_file', 'dti.@md')]),
                (renameAD, subjSink, [
                    ('out_file', 'dti.@ad')]),
                (renameRD, subjSink, [
                    ('out_file', 'dti.@rd')]),
                (renameTract, subjSink, [
                    ('out_file', 'tractography.@tract')]),
                (renameTck, subjSink, [
                    ('out_file', 'tractography.@tck')])
            ])

    pl.write_graph(graph2use='flat', format='svg', simple_form=False)
    pl.write_graph(graph2use='colored', format='svg')

    if nthreads >= 8:
        pl.run(plugin='MultiProc', plugin_args={'n_procs': 4})
    else:
        pl.run(plugin='Linear')


if __name__ == '__main__':
    main()
